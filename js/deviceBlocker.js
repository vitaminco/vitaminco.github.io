// deviceBlocker.js - Ch·∫∑n thi·∫øt b·ªã nh·ªè h∆°n tablet
(function () {
    'use strict';

    // K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu (768px - k√≠ch th∆∞·ªõc tablet ti√™u chu·∫©n)
    const MIN_WIDTH = 768;
    const MIN_HEIGHT = 600;

    // Cache c√°c elements
    let overlay = null;
    const body = document.body;

    // T·∫°o HTML cho popup ch·∫∑n thi·∫øt b·ªã
    function createBlockOverlay() {
        const overlayHTML = `
            <div class="device-block-overlay" id="deviceBlockOverlay">
                <div class="device-block-content">
                    <div class="device-block-icon">üì±‚ùå</div>
                    <h2 class="device-block-title">Thi·∫øt b·ªã kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£</h2>
                    <p class="device-block-message">
                        Xin l·ªói! Trang web n√†y ch·ªâ h·ªó tr·ª£ tr√™n c√°c thi·∫øt b·ªã c√≥ m√†n h√¨nh l·ªõn h∆°n ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t.
                        <br><br>
                        Vui l√≤ng truy c·∫≠p b·∫±ng:
                    </p>
                    <div class="device-list">
                        <div class="device-item">
                            <div>üíª</div>
                            <div>M√°y t√≠nh</div>
                        </div>
                        <div class="device-item">
                            <div>üì±</div>
                            <div>Tablet</div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        body.insertAdjacentHTML('beforeend', overlayHTML);
        overlay = document.getElementById('deviceBlockOverlay');
    }

    // Ki·ªÉm tra k√≠ch th∆∞·ªõc thi·∫øt b·ªã
    function checkDeviceSize() {
        const screenWidth = window.innerWidth || document.documentElement.clientWidth;
        const screenHeight = window.innerHeight || document.documentElement.clientHeight;

        // Ki·ªÉm tra n·∫øu thi·∫øt b·ªã nh·ªè h∆°n y√™u c·∫ßu
        if (screenWidth < MIN_WIDTH || screenHeight < MIN_HEIGHT) {
            showBlockMessage();
            return false;
        } else {
            hideBlockMessage();
            return true;
        }
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o ch·∫∑n
    function showBlockMessage() {
        if (!overlay) createBlockOverlay();

        if (overlay) {
            overlay.style.display = 'flex';
            body.classList.add('device-blocked');
        }
    }

    // ·∫®n th√¥ng b√°o ch·∫∑n
    function hideBlockMessage() {
        if (overlay) {
            overlay.style.display = 'none';
            body.classList.remove('device-blocked');
        }
    }

    // Throttle function ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
    function throttle(func, limit) {
        let inThrottle;
        return function () {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        }
    }

    // Ki·ªÉm tra khi trang load v√† khi thay ƒë·ªïi k√≠ch th∆∞·ªõc
    function init() {
        // Ki·ªÉm tra ngay khi load
        checkDeviceSize();

        // Ki·ªÉm tra khi thay ƒë·ªïi k√≠ch th∆∞·ªõc m√†n h√¨nh (v·ªõi throttle)
        const throttledCheck = throttle(checkDeviceSize, 250);
        window.addEventListener('resize', throttledCheck, { passive: true });

        // Ki·ªÉm tra khi thay ƒë·ªïi orientation tr√™n mobile
        window.addEventListener('orientationchange', function () {
            setTimeout(checkDeviceSize, 500); // Delay ƒë·ªÉ ƒë·∫£m b·∫£o k√≠ch th∆∞·ªõc ƒë√£ thay ƒë·ªïi
        }, { passive: true });

        console.log('Device blocker initialized - Min size: ' + MIN_WIDTH + 'x' + MIN_HEIGHT);
    }

    // Kh·ªüi t·∫°o khi DOM ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init, { once: true });
    } else {
        init();
    }

})();